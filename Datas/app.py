import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from bokeh.plotting import figure

st.set_page_config(page_icon="üîç", layout="wide", page_title="Evolution de la COVID 19")

PAGE_CONFIG = {"page_title":"Marwa's & Sithursha's Project", "page_icon":"smiley", "layout":"centered" }

DATA_PATH = '/content/drive/MyDrive/STID2022_-_Evolution_de_la_COVID_19/Datas/Database.csv'
DATE_COLUMN ='date'

# Load data
@st.cache
def load_data():
  data = pd.read_csv(DATA_PATH, sep=",", header=0, encoding='utf-8')
  data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])
  return data

data = load_data()

# Sep for figures
def thousand_sep(num):
    return ("{:,}".format(num))

# Widgets data
countries = []
for country in data['country']:
  countries.append(country)
countries = list(set(countries))

date_min = min(data['date'])
date_max = max(data['date'])

# Import images
img_Marwa = '/content/drive/MyDrive/STID2022_-_Evolution_de_la_COVID_19/Datas/Marwa.jpg'
img_Sithursha = '/content/drive/MyDrive/STID2022_-_Evolution_de_la_COVID_19/Datas/Sithursha.jpg'
logo =  '/content/drive/MyDrive/STID2022_-_Evolution_de_la_COVID_19/Datas/Logo projet S4.png'

def main():
  
  t1, t2 = st.columns((0.1,1)) 
  t1.image(logo, width = 100)
  t2.title("Bienvenue sur le Tableau de bord COVID 19 :earth_africa:")
  t2.text("Vous vous demandez comment √©volue la situation sanitaire dans le Monde ? On vous r√©pond !")

  menu = ["Pourquoi ce tableau de bord ?","La situation sanitaire mondiale", "Classement des pays",
          "Zoomons sur un pays"]

  choice = st.sidebar.radio('Menu', menu)
    
  if choice == 'Pourquoi ce tableau de bord ?':
    st.header("L'histoire du tableau de bord")
    st.text("""
    Avec ce tableau de bord, vous pourrez voir les donn√©es de mani√®re simple et ludique. Beaucoup de sites web et applications nous permettent d√©j√† de consulter
    les donn√©es de la pand√©mie, mais les donn√©es ne sont pas assez mises en valeur. Notre but est de faire en sorte que l'appr√©ciation des donn√©es
    soit agr√©able et captivante.
    """)

    st.markdown(""" 
    ### Qui sommes-nous ?

    Nous sommes deux √©tudiantes en deuxi√®me ann√©e de DUT STID (Statistiques et Traitement Informatique des Donn√©es).
    """)

    intro_marwa = st.write("**Etudiante n¬∞1 :**")
    col1, mid, col2 = st.columns([20,1,50])
    with col1:
      st.image(img_Marwa, width=350)
    with col2:
      st.write("""Je m'appelle Marwa ! Dans ce projet, je me suis occup√©e de la r√©daction du cahier des charges et du 
      d√©veloppement du site web. Ce qui m'a le plus plu dans ce que j'ai fait, c'est d'observer l'avancement du site web.
      Cela m'a procur√© beaucoup de satisfaction et je suis fi√®re du r√©sultat !""")
    
    intro_sithursha = st.write("**Etudiante n¬∞2 :**")
    col1, mid, col2 = st.columns([50,1,20])
    with col1:
      st.write("""Moi c'est Sithursha ! Je me suis occup√©e de la base de donn√©es. J'ai trait√© les donn√©es manquantes,
      ajouter des colonnes pour les donn√©es g√©ographiques de chaque pays (continents, latitude et longitude) et fusionner nos diff√©rentes
      sources de donn√©es.""")
    with col2:
      st.image(img_Sithursha, width=350)

    st.markdown("""
    ### D'o√π nous est venue l'id√©e de cr√©er un tableau de bord de la COVID 19 ?

    Au troisi√®me semestre de notre formation, nous avions cr√©er une application Shiny en langage R
    qui permettait de visualiser les donn√©es hospitali√®res fran√ßaises.
    Cela nous a √©norm√©ment plu donc nous nous sommes lanc√©es le d√©fi de cr√©er des visualisations int√©ractives dans
    un autre langage de programmation :sparkles: Python :sparkles:.

    Sur TousAnti Covid, application de l'Etat, il y a la possibilit√© de consulter les donne√©s relatives
    √† la pand√©mie. Nous √©tions tr√®s frustr√©es de voir que les donn√©es n'√©taient pas mise en valeur par
    l'application. De plus, ces donn√©es sont dans l'ombre de l'option qui permet d'avoir son pass
    sanitaire √† tout moment sur soi.

    Notre coeur de m√©tier √©tant le traitement et la visualisation de donn√©es, nous ne nous pouvions pas 
    rester devant cette injustice sans rien faire.

    C'est donc de l√† qu'est partie notre id√©e de cr√©er un tableau de bord de la COVID 19 !

    Nous nous sommes dit qu'observer la situation sanitaire fran√ßaise √©tait bien mais observer la
    situation sanitaire mondiale est encore mieux ! 

    Nous avons donc d√©cider de faire un tableau de bord de l'√©volution de la situation sanitaire mondiale :sunglasses::earth_africa:.

    ### Quel est l'int√©r√™t de cr√©er un tableau de bord en Python ?

    Il y a tout d'abord l'outil "tableau de bord" en lui-m√™me qui est plaisant, l'interactivit√© nous permet
    de "voyager" dans les donn√©es.

    Ensuite, nous souhaitons √† l'issue de ce projet, monter en comp√©tences dans ce vaste langage de programmation qui est Python.
    Le package Streamlit, qui permet de cr√©er un site et faire des visualisations int√©ractives des donn√©es, nous servira dans notre
    vie professionnelle future car nos projets professionnelles tournent autour de la repr√©sentation des donn√©es autrement appel√©e la 
    :sparkles:**Data Visualization**:sparkles:.
    
    ### De quoi nous sommes-nous inspir√©es pour cr√©er ce tableau de bord ?

    Pour r√©aliser ce tableau de bord, nous nous sommes inspir√©es de plusieurs sites/applications dont
    voici les liens :
    """)

    st.write("Covid Visualizer : https://www.covidvisualizer.com/")
    st.write("Tous AntiCovid : https://www.gouvernement.fr/info-coronavirus/tousanticovid")
    st.write("Worldometer : https://www.worldometers.info/coronavirus/")
    st.write("WHO (World Health Organization) : https://covid19.who.int/table")

  # Situation sanitaire mondiale

  if choice == 'La situation sanitaire mondiale' :
    st.header('Comment √©volue la situation sanitaire dans le monde ?')

    regions = st.multiselect("Je veux voir la situation sanitaire ...", ("dans le monde entier", "en Afrique","en Asie",
                                                                         "en Am√©rique du Nord", "en Am√©rique du Sud", "en Europe",
                                                                         "en Oc√©anie"), default='dans le monde entier')

    viz = st.radio("Je souhaite observer...", ('Le nombre de cas positifs √† la COVID',
                                               'Le nombre de cas positifs √† la COVID (en cas cumul√©s)',
                                               'Le nombre de morts', 'Le nombre de morts (en morts cumul√©es)',
                                               'La vaccination'))

    if viz == "Le nombre de cas positifs √† la COVID":      
      p = figure(
              title="Nombre de cas positifs √† la COVID",
              x_axis_label='Date',
              x_axis_type='datetime',
              y_axis_label='Nombre de cas positifs √† la COVID'
          )
      
      for region in regions:
        if region == "dans le monde entier": 
          
          df = data[["date", "New_cases"]].groupby(["date"]).sum().reset_index()
    
          p.line(df["date"], df["New_cases"], legend_label="dans le monde entier", color="black", line_width=2)
    
        elif region == "en Afrique":
          df = data[data["continents"] == "Afrique"][["date", "New_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_cases"], legend_label="en Afrique", color="red", line_width=2)

        elif region == "en Asie":
          df = data[data["continents"] == "Asie"][["date", "New_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_cases"], legend_label='en Asie', line_width=2, color='green')

        elif region == "en Am√©rique du Nord":
          df = data[data["continents"] == "Am√©rique du Nord"][["date", "New_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_cases"], legend_label='en Am√©rique du Nord', line_width=2, color='purple')
        
        elif region == "en Am√©rique du Sud":
          df = data[data["continents"] == "Am√©rique du Sud"][["date", "New_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_cases"], legend_label='en Am√©rique du Sud', line_width=2, color='brown')

        elif region == "en Europe":
          df = data[data["continents"] == "Europe"][["date", "New_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_cases"], legend_label='en Europe', line_width=2, color='blue')

        elif region == "en Oc√©anie":
          df = data[data["continents"] == "Oc√©anie"][["date", "New_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_cases"], legend_label='en Oc√©anie', line_width=2, color='orange')
    
      p.legend.location = "top_left"
      st.bokeh_chart(p, use_container_width=True)
    
    elif viz == "Le nombre de cas positifs √† la COVID (en cas cumul√©s)":      
      p = figure(
              title="Le nombre de cas cumul√©s positifs √† la COVID",
              x_axis_label='Date',
              x_axis_type='datetime',
              y_axis_label='Le nombre de cas cumul√©s positifs √† la COVID'
          )
      
      for region in regions:
        if region == "dans le monde entier": 
          
          df = data[["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
    
          p.line(df["date"], df["Cumulative_cases"], legend_label="dans le monde entier", color="black", line_width=2)
    
        elif region == "en Afrique":
          df = data[data["continents"] == "Afrique"][["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_cases"], legend_label="en Afrique", color="red", line_width=2)

        elif region == "en Asie":
          df = data[data["continents"] == "Asie"][["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_cases"], legend_label='en Asie', line_width=2, color='green')

        elif region == "en Am√©rique du Nord":
          df = data[data["continents"] == "Am√©rique du Nord"][["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_cases"], legend_label='en Am√©rique du Nord', line_width=2, color='purple')
        
        elif region == "en Am√©rique du Sud":
          df = data[data["continents"] == "Am√©rique du Sud"][["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_cases"], legend_label='en Am√©rique du Sud', line_width=2, color='brown')

        elif region == "en Europe":
          df = data[data["continents"] == "Europe"][["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_cases"], legend_label='en Europe', line_width=2, color='blue')

        elif region == "en Oc√©anie":
          df = data[data["continents"] == "Oc√©anie"][["date", "Cumulative_cases"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_cases"], legend_label='en Oc√©anie', line_width=2, color='orange')
    
      p.legend.location = "top_left"
      st.bokeh_chart(p, use_container_width=True)
    
    elif viz == "Le nombre de morts":      
      p = figure(
              title="Nombre de morts",
              x_axis_label='Date',
              x_axis_type='datetime',
              y_axis_label='Nombre de morts'
          )
      
      for region in regions:
        if region == "dans le monde entier": 
          
          df = data[["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
    
          p.line(df["date"], df["New_deaths"], legend_label="dans le monde entier", color="black", line_width=2)
    
        elif region == "en Afrique":
          df = data[data["continents"] == "Afrique"][["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_deaths"], legend_label="en Afrique", color="red", line_width=2)

        elif region == "en Asie":
          df = data[data["continents"] == "Asie"][["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_deaths"], legend_label='en Asie', line_width=2, color='green')

        elif region == "en Am√©rique du Nord":
          df = data[data["continents"] == "Am√©rique du Nord"][["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_deaths"], legend_label='en Am√©rique du Nord', line_width=2, color='purple')
        
        elif region == "en Am√©rique du Sud":
          df = data[data["continents"] == "Am√©rique du Sud"][["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_deaths"], legend_label='en Am√©rique du Sud', line_width=2, color='brown')

        elif region == "en Europe":
          df = data[data["continents"] == "Europe"][["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_deaths"], legend_label='en Europe', line_width=2, color='blue')

        elif region == "en Oc√©anie":
          df = data[data["continents"] == "Oc√©anie"][["date", "New_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["New_deaths"], legend_label='en Oc√©anie', line_width=2, color='orange')
      p.legend.location = "top_left"
      st.bokeh_chart(p, use_container_width=True)

    elif viz == "Le nombre de morts (en morts cumul√©es)":      
      p = figure(
              title="Nombre de morts cumul√©s",
              x_axis_label='Date',
              x_axis_type='datetime',
              y_axis_label='Nombre de morts cumul√©s'
          )
      
      for region in regions:
        if region == "dans le monde entier": 
          
          df = data[["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
    
          p.line(df["date"], df["Cumulative_deaths"], legend_label="dans le monde entier", color="black", line_width=2)
    
        elif region == "en Afrique":
          df = data[data["continents"] == "Afrique"][["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_deaths"], legend_label="en Afrique", color="red", line_width=2)

        elif region == "en Asie":
          df = data[data["continents"] == "Asie"][["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_deaths"], legend_label='en Asie', line_width=2, color='green')

        elif region == "en Am√©rique du Nord":
          df = data[data["continents"] == "Am√©rique du Nord"][["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_deaths"], legend_label='en Am√©rique du Nord', line_width=2, color='purple')
        
        elif region == "en Am√©rique du Sud":
          df = data[data["continents"] == "Am√©rique du Sud"][["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_deaths"], legend_label='en Am√©rique du Sud', line_width=2, color='brown')

        elif region == "en Europe":
          df = data[data["continents"] == "Europe"][["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_deaths"], legend_label='en Europe', line_width=2, color='blue')

        elif region == "en Oc√©anie":
          df = data[data["continents"] == "Oc√©anie"][["date", "Cumulative_deaths"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["Cumulative_deaths"], legend_label='en Oc√©anie', line_width=2, color='orange')
      p.legend.location = "top_left"
      st.bokeh_chart(p, use_container_width=True)
    
    elif viz == "La vaccination":      
      p = figure(
              title="Vaccination",
              x_axis_label='Date',
              x_axis_type='datetime',
              y_axis_label='Vaccination'
          )
      
      for region in regions:
        if region == "dans le monde entier": 
          
          df = data[["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
    
          p.line(df["date"], df["daily_vaccinations"], legend_label="dans le monde entier", color="black", line_width=2)
    
        elif region == "en Afrique":
          df = data[data["continents"] == "Afrique"][["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["daily_vaccinations"], legend_label="en Afrique", color="red", line_width=2)

        elif region == "en Asie":
          df = data[data["continents"] == "Asie"][["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["daily_vaccinations"], legend_label='en Asie', line_width=2, color='green')

        elif region == "en Am√©rique du Nord":
          df = data[data["continents"] == "Am√©rique du Nord"][["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["daily_vaccinations"], legend_label='en Am√©rique du Nord', line_width=2, color='purple')
        
        elif region == "en Am√©rique du Sud":
          df = data[data["continents"] == "Am√©rique du Sud"][["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["daily_vaccinations"], legend_label='en Am√©rique du Sud', line_width=2, color='brown')

        elif region == "en Europe":
          df = data[data["continents"] == "Europe"][["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["daily_vaccinations"], legend_label='en Europe', line_width=2, color='blue')

        elif region == "en Oc√©anie":
          df = data[data["continents"] == "Oc√©anie"][["date", "daily_vaccinations"]].groupby(["date"]).sum().reset_index()
          p.line(df["date"], df["daily_vaccinations"], legend_label='en Oc√©anie', line_width=2, color='orange')
      p.legend.location = "top_left"
      st.bokeh_chart(p, use_container_width=True)

  # Classement des pays

  if choice == 'Classement des pays' :
    selected_date = st.slider("Choisis une date", min_value=date_min, max_value=date_max, value=datetime(2021,4,6))

    n = st.number_input("Choisis le nombre de pays que tu veux voir", min_value=1, max_value=10, value=3)

    top_selected = st.radio(f'Les {n} pays avec le plus...', ('de cas positifs √† la COVID','de morts de la COVID',
                                                              'de doses de vaccins inject√©es contre la COVID'))

    if top_selected == 'de cas positifs √† la COVID':
      st.subheader(f'Quels sont les {n} pays avec le plus de cas positifs √† la COVID le {selected_date.date()} ?')
      case1 = st.radio('Comment veux-tu voir le classement ?', ('en cas par jour', 'en cas cummul√©s'))

      if case1 == 'en cas par jour':
        variable = data[data["date"] == selected_date.date().strftime('%Y-%m-%d')].nlargest(n, columns="New_cases")[["country", "New_cases"]].reset_index()
        s = "## **R√©sultats :**\n"
        for index, row in variable.iterrows():
            s += f'**Position {index + 1} :** {row["country"]} avec {thousand_sep(row["New_cases"])} cas  \n\n'

        st.markdown(s)

      if case1 == 'en cas cummul√©s':
        variable = data[data["date"] == selected_date.date().strftime('%Y-%m-%d')].nlargest(n, columns="Cumulative_cases")[["country", "Cumulative_cases"]].reset_index()
        s = "## **R√©sultats :**\n"
        for index, row in variable.iterrows():
            s += f'**Position {index + 1} :** {row["country"]} avec {thousand_sep(row["Cumulative_cases"])} cas  \n\n'

        st.markdown(s)

    if top_selected == 'de morts de la COVID':
      st.subheader(f'Quels sont les pays avec le plus de cas positifs √† la COVID le {selected_date.date()} ?')
      case2 = st.radio('Comment veux-tu voir le classement ?', ('en cas par jour', 'en cas cummul√©s'))

      if case2 == 'en cas par jour':
        variable = data[data["date"] == selected_date.date().strftime('%Y-%m-%d')].nlargest(n, columns="New_deaths")[["country", "New_deaths"]].reset_index()
        s = "## **R√©sultats :**\n"
        for index, row in variable.iterrows():
            s += f'**Position {index + 1} :** {row["country"]} avec {thousand_sep(row["New_deaths"])} morts  \n\n'

        st.markdown(s)

      if case2 == 'en cas cummul√©s':
        variable = data[data["date"] == selected_date.date().strftime('%Y-%m-%d')].nlargest(n, columns="Cumulative_deaths")[["country", "Cumulative_deaths"]].reset_index()
        s = "## **R√©sultats :**\n"
        for index, row in variable.iterrows():
            s += f'**Position {index + 1} :** {row["country"]} avec {thousand_sep(row["Cumulative_deaths"])} morts  \n\n'

        st.markdown(s)

    if top_selected == 'de doses de vaccins inject√©es contre la COVID':
      st.subheader(f'Quels sont les pays avec le plus de doses de vaccins inject√©es contre la COVID le {selected_date.date()} ?')
      variable = data[data["date"] == selected_date.date().strftime('%Y-%m-%d')].nlargest(n, columns="daily_vaccinations")[["country", "daily_vaccinations"]].reset_index()
      s = "## **R√©sultats :**\n"
      for index, row in variable.iterrows():
          s += f'**Position {index + 1} :** {row["country"]} avec {thousand_sep(row["daily_vaccinations"])} doses de vaccin inject√©es  \n\n'

      st.markdown(s)

  # Zoom sur un pays

  if choice == 'Zoomons sur un pays' :
    st.header("S√©lectionnez le pays de votre choix")

    selected_country = st.selectbox("Choisis un pays", sorted(countries))

    selected_data = st.radio("Je souhaite voir...", ('Les cas positifs', 'Les d√©c√®s', 'La vaccination'))

    # Functions for 'Zoom sur un pays'
    def select_population(selected_country):
      pop = data[data.country == selected_country].Population.unique()
      return pop.astype(int)

    def sum_cases(selected_country):
      sum_cases = data[data.country == selected_country].New_cases.sum()
      return thousand_sep(sum_cases)

    def sum_deaths(selected_country):
      sum_deaths = data[data.country == selected_country].New_deaths.sum()
      return thousand_sep(sum_deaths)

    def sum_vaccinations(selected_country):
      sum_vaccinations = max(data[data.country == selected_country].daily_vaccinations)
      return thousand_sep(sum_vaccinations)

    # End functions for 'Zoom sur un pays'

    pop = select_population(selected_country)
    sum_cases = sum_cases(selected_country)
    sum_deaths = sum_deaths(selected_country)
    sum_vaccinations = sum_vaccinations(selected_country)

    c1, c2, c3, c4 = st.columns((0.8,0.9,0.8,1.5)) 
    c1.subheader("**Nombre d'habitants**\n\n")
    c1.markdown(f"### **{thousand_sep(pop[0])} habitants**")
    c2.subheader("**Nombre total de cas**\n\n")
    c2.markdown(f"### **{sum_cases} cas**")
    c3.subheader("**Nombre total de morts**\n\n")
    c3.markdown(f"### **{sum_deaths} morts**")
    c4.subheader("**Nombre total de doses de vaccins inject√©es**\n\n")
    c4.markdown(f"### **{sum_vaccinations} doses**")

    x = data[data.country == selected_country].date

    if selected_data == 'Les cas positifs':
      y = data[data.country == selected_country].New_cases
      title = 'cas atteints par la COVID 19'
      y_label = 'de cas'

    if selected_data == 'Les d√©c√®s':
      y = data[data.country == selected_country].New_deaths
      title = 'd√©c√®s caus√©s par la COVID 19'
      y_label = 'de morts'

    if selected_data == 'La vaccination':
      y = data[data.country == selected_country].daily_vaccinations
      title = 'doses de vaccins inject√©es'
      y_label = 'de doses de vaccins inject√©es'
   
    p = figure(
        title= f'Evolution du nombre de {title}',
        x_axis_label='Date',
        x_axis_type='datetime',
        y_axis_label=f'Nombre {y_label}')
    
    p.line(x, y, legend_label=f'Tendance du pays {selected_country}', line_width=2)
    st.bokeh_chart(p, use_container_width=True)

if __name__ =='__main__':
  main()
